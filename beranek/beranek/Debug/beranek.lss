
beranek.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab0  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e6  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000313  00000000  00000000  00001f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002251  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  88:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <TWIbegin>:
  TCCR1A |= (1 << WGM11); //fast pwm
  TCCR1B |= (1 << WGM12);  //fast pwm
  TCCR1B |= (1 << WGM13); //fast pwm
  TCCR1A |= (1<<COM1A1); //non-inverting
  TCCR1B |= (1<<CS10);  //clock bez prescaleru
  ICR1 = 0x03ff; //10-bit rozsah
  90:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  9a:	08 95       	ret

0000009c <TWIStart>:
  9c:	84 ea       	ldi	r24, 0xA4	; 164
  9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  a2:	85 e0       	ldi	r24, 0x05	; 5
  a4:	8b b9       	out	0x0b, r24	; 11
  a6:	ec eb       	ldi	r30, 0xBC	; 188
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 23       	and	r24, r24
  ae:	ec f7       	brge	.-6      	; 0xaa <TWIStart+0xe>
  b0:	08 95       	ret

000000b2 <TWIWrite>:
  b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  b6:	84 e8       	ldi	r24, 0x84	; 132
  b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  bc:	ec eb       	ldi	r30, 0xBC	; 188
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 23       	and	r24, r24
  c4:	ec f7       	brge	.-6      	; 0xc0 <TWIWrite+0xe>
  c6:	08 95       	ret

000000c8 <writeDAC>:
}
void writeDAC(uint16_t data)
{
  PORTD = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	81 ee       	ldi	r24, 0xE1	; 225
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <writeDAC+0xa>
  da:	00 c0       	rjmp	.+0      	; 0xdc <writeDAC+0x14>
  dc:	00 00       	nop
  _delay_ms(100);
  PORTD = 0x00;
  de:	1b b8       	out	0x0b, r1	; 11
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	81 ee       	ldi	r24, 0xE1	; 225
  e4:	94 e0       	ldi	r25, 0x04	; 4
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <writeDAC+0x1e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <writeDAC+0x28>
  f0:	00 00       	nop
  _delay_ms(100);
  TWIStart();
  f2:	0e 94 4e 00 	call	0x9c	; 0x9c <TWIStart>

uint8_t TWIGetStatus(void)
{
  uint8_t status;
  //mask status
  status = TWSR & 0xF8; //status TWI
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  PORTD = 0xFF;
  _delay_ms(100);
  PORTD = 0x00;
  _delay_ms(100);
  TWIStart();
  if (TWIGetStatus() != 0x08)
  fa:	88 7f       	andi	r24, 0xF8	; 248
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	11 f0       	breq	.+4      	; 0x104 <writeDAC+0x3c>
  {
    PORTD = 0xFF;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8b b9       	out	0x0b, r24	; 11
  }
  TWIWrite(0b11000010);
 104:	82 ec       	ldi	r24, 0xC2	; 194
 106:	0e 94 59 00 	call	0xb2	; 0xb2 <TWIWrite>

uint8_t TWIGetStatus(void)
{
  uint8_t status;
  //mask status
  status = TWSR & 0xF8; //status TWI
 10a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if (TWIGetStatus() != 0x08)
  {
    PORTD = 0xFF;
  }
  TWIWrite(0b11000010);
  if (TWIGetStatus() != 0x18)
 10e:	88 7f       	andi	r24, 0xF8	; 248
 110:	88 31       	cpi	r24, 0x18	; 24
 112:	11 f0       	breq	.+4      	; 0x118 <writeDAC+0x50>
  {
    PORTD = 0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8b b9       	out	0x0b, r24	; 11
  }
  TWIWrite(0x7F);
 118:	8f e7       	ldi	r24, 0x7F	; 127
 11a:	0e 94 59 00 	call	0xb2	; 0xb2 <TWIWrite>

uint8_t TWIGetStatus(void)
{
  uint8_t status;
  //mask status
  status = TWSR & 0xF8; //status TWI
 11e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if (TWIGetStatus() != 0x18)
  {
    PORTD = 0xFF;
  }
  TWIWrite(0x7F);
  if (TWIGetStatus() != 0x28)
 122:	88 7f       	andi	r24, 0xF8	; 248
 124:	88 32       	cpi	r24, 0x28	; 40
 126:	11 f0       	breq	.+4      	; 0x12c <writeDAC+0x64>
  {
    PORTD = 0xFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8b b9       	out	0x0b, r24	; 11
  }
  TWIWrite(0x00);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 59 00 	call	0xb2	; 0xb2 <TWIWrite>

uint8_t TWIGetStatus(void)
{
  uint8_t status;
  //mask status
  status = TWSR & 0xF8; //status TWI
 132:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if (TWIGetStatus() != 0x28)
  {
    PORTD = 0xFF;
  }
  TWIWrite(0x00);
  if (TWIGetStatus() != 0x28)
 136:	88 7f       	andi	r24, 0xF8	; 248
 138:	88 32       	cpi	r24, 0x28	; 40
 13a:	11 f0       	breq	.+4      	; 0x140 <writeDAC+0x78>
  {
    PORTD = 0xFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	8b b9       	out	0x0b, r24	; 11
    PORTD = 0x05;
    while (!(TWCR & (1<<TWINT))); //èekám na flag odeslání
}
void TWIStop(void)
{
  TWCR = (1<<TWEN)|(1<<TWSTO);   //pošlu stop
 140:	84 e1       	ldi	r24, 0x14	; 20
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 146:	08 95       	ret

00000148 <main>:
  }
  TWIStop();
}
int main(void)
{
  DDRD = 0xFC;
 148:	8c ef       	ldi	r24, 0xFC	; 252
 14a:	8a b9       	out	0x0a, r24	; 10
  DDRB = 0x0F;
 14c:	8f e0       	ldi	r24, 0x0F	; 15
 14e:	84 b9       	out	0x04, r24	; 4
  PORTC = 0xCF;
 150:	8f ec       	ldi	r24, 0xCF	; 207
 152:	88 b9       	out	0x08, r24	; 8
  TWIbegin();
 154:	0e 94 48 00 	call	0x90	; 0x90 <TWIbegin>
    {
   // measure = adcMeasure(1);
    //PORTD = (measure << 2);
    //PORTB = (((measure >> 6) & 0x01) | ((measure >> 5) & 0x1C));
    //OCR1A = measure;
    writeDAC(measure);
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 160:	0e 94 64 00 	call	0xc8	; 0xc8 <writeDAC>
 164:	f9 cf       	rjmp	.-14     	; 0x158 <main+0x10>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
